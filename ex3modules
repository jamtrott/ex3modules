#!/bin/bash
# ex3modules - Makefiles for installing software on the eX3 cluster
# Copyright (C) 2022 James D. Trotter
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# Authors: James D. Trotter <james@simula.no>
#
# This script builds and installs software packages and Environment
# Modules scripts on the eX3 cluster.
#
# Example usage:
#
#  $ ./ex3modules --prefix=/work/${USER}/ex3modules

set -o errexit

program_name=ex3modules
program_version=0.7.0

# default options
with_openblas=
with_cmake=
with_cuda=
with_hwloc=
with_ucx=
with_mpi=
with_openssl=
with_python=
with_rocm=
with_slurm=
with_zlib=

function help()
{
    printf "Usage: ${0} [OPTION]..\n"
    printf " Build and install software packages and Environment Modules scripts for eX3\n"
    printf "\n"
    printf " Options are:\n"
    printf "  %-20s\t%s\n" "--prefix=PREFIX" "install files in PREFIX"
    printf "  %-20s\t%s\n" "--pkgsrcdir=DIR" "package sources [PREFIX/src]"
    printf "  %-20s\t%s\n" "--pkgdir=DIR" "installed packages [PREFIX/pkgs]"
    printf "  %-20s\t%s\n" "--modulefilesdir=DIR" "Environment Modules scripts [PREFIX/modulefiles]"
    printf "\n"
    printf "  %-20s\t%s\n" "--list-packages" "list available packages"
    printf "  %-20s\t%s\n" "--describe-package" "describe packages"
    printf "\n"
    printf "  %-20s\t%s\n" "--enable-gfortran" "build and use internal Fortran compiler"
    printf "  %-20s\t%s\n" "--with-openblas=DIR" "Root directory of OpenBLAS installation, or 'openblas-0.3.12'."
    printf "  %-20s\t%s\n" ""               "If a directory is given, then an external OpenBLAS is used. In this case,"
    printf "  %-20s\t%s\n" ""               "DIR/include and DIR/lib are added to search paths for headers and libraries."
    printf "  %-20s\t%s\n" ""               "Otherwise, an internal OpenBLAS is used."
    printf "  %-20s\t%s\n" "--without-openblas" "disable OpenBLAS usage completely. Some modules may not be built."
    printf "  %-20s\t%s\n" "--with-cmake=DIR" "Root directory of CMake installation, or 'cmake-3.17.2'."
    printf "  %-20s\t%s\n" ""               "If a directory is given, then an external CMake is used. In this case,"
    printf "  %-20s\t%s\n" ""               "DIR/bin is added to PATH. Otherwise, an internal CMake is used."
    printf "  %-20s\t%s\n" "--without-cmake" "disable CMake usage completely. Some modules may not be built."
    printf "  %-20s\t%s\n" "--with-cuda=DIR" "Root directory of CUDA Toolkit installation or 'auto'."
    printf "  %-20s\t%s\n" ""               "If a directory is given, then an external CUDA Toolkit is used. In this case,"
    printf "  %-20s\t%s\n" ""               "DIR/bin is added to PATH, and DIR/include, DIR/lib and DIR/lib64 are added "
    printf "  %-20s\t%s\n" ""               "to search paths for headers and libraries. Otherwise, an internal CUDA Toolkit is used."
    printf "  %-20s\t%s\n" "--without-cuda" "disable CUDA usage completely. Some modules may not be built."
    printf "  %-20s\t%s\n" "--with-hwloc=DIR" "Root directory of hwloc installation, or 'hwloc-2.4.1'."
    printf "  %-20s\t%s\n" ""               "If a directory is given, then an external hwloc is used. In this case,"
    printf "  %-20s\t%s\n" ""               "DIR/bin, DIR/include, DIR/lib and DIR/lib64 are added to search paths for"
    printf "  %-20s\t%s\n" ""               "binaries, headers and libraries. Otherwise, an internal hwloc is used."
    printf "  %-20s\t%s\n" "--without-hwloc" "disable hwloc usage completely"
    printf "  %-20s\t%s\n" "--with-ucx=DIR" "Root directory of UCX installation, or one of the following values:"
    printf "  %-20s\t%s\n" ""               "ucx-1.17.0 or ucx-1.12.1"
    printf "  %-20s\t%s\n" ""               "If a directory is given, then an external UCX is used, and DIR/include,"
    printf "  %-20s\t%s\n" ""               "DIR/lib and DIR/lib64 are added to search paths for headers and libraries."
    printf "  %-20s\t%s\n" ""               "Otherwise, an internal UCX implementation is built and used."
    printf "  %-20s\t%s\n" "--without-ucx" "disable UCX usage completely. Some modules may not be built."
    printf "  %-20s\t%s\n" "--with-mpi=DIR" "Root directory of MPI installation, or one of the following values:"
    printf "  %-20s\t%s\n" ""               "'openmpi-5.0.5', 'openmpi-4.1.6', 'openmpi-4.1.4', 'openmpi-4.0.5', 'mpich-3.3.2' or 'mvapich-2.3.4'."
    printf "  %-20s\t%s\n" ""               "If a directory is given, then an external MPI is used, and DIR/include,"
    printf "  %-20s\t%s\n" ""               "DIR/lib and DIR/lib64 are added to search paths for headers and libraries."
    printf "  %-20s\t%s\n" ""               "Otherwise, an internal MPI implementation is built and used."
    printf "  %-20s\t%s\n" "--without-mpi" "disable MPI usage completely. Some modules may not be built."
    printf "  %-20s\t%s\n" "--with-openssl=DIR" "Root directory of OpenSSL installation, or 'openssl-1.1.1c'."
    printf "  %-20s\t%s\n" ""               "If a directory is given, then an external OpenSSL is used. In this case,"
    printf "  %-20s\t%s\n" ""               "DIR/bin, DIR/include, DIR/lib and DIR/lib64 are added to search paths for"
    printf "  %-20s\t%s\n" ""               "binaries, headers and libraries. Otherwise, an internal OpenSSL is used."
    printf "  %-20s\t%s\n" "--without-openssl" "disable OpenSSL usage completely"
    printf "  %-20s\t%s\n" "--with-python=DIR" "Root directory of Python installation, or 'python-3.7.4'."
    printf "  %-20s\t%s\n" ""               "If a directory is given, then an external Python is used. In this case,"
    printf "  %-20s\t%s\n" ""               "DIR/bin, DIR/include, DIR/lib and DIR/lib64 are added to search paths for"
    printf "  %-20s\t%s\n" ""               "binaries, headers and libraries. Otherwise, an internal Python is used."
    printf "  %-20s\t%s\n" "--without-python" "disable Python usage completely. Some modules may not be built."
    printf "  %-20s\t%s\n" "--with-rocm=DIR" "Root directory of ROCm Toolkit installation or 'auto'."
    printf "  %-20s\t%s\n" ""               "If a directory is given, then an external ROCm Toolkit is used. In this case,"
    printf "  %-20s\t%s\n" ""               "DIR/bin is added to PATH, and DIR/include, DIR/lib and DIR/lib64 are added "
    printf "  %-20s\t%s\n" ""               "to search paths for headers and libraries. Otherwise, an internal ROCm Toolkit is used."
    printf "  %-20s\t%s\n" "--without-rocm" "disable ROCm usage completely. Some modules may not be built."
    printf "  %-20s\t%s\n" "--with-slurm=DIR" "Root directory of Slurm installation, or 'slurm-20.02.7'."
    printf "  %-20s\t%s\n" ""               "If a directory is given, then an external Slurm is used. In this case,"
    printf "  %-20s\t%s\n" ""               "DIR/bin, DIR/include, DIR/lib and DIR/lib64 are added to search paths for"
    printf "  %-20s\t%s\n" ""               "binaries, headers and libraries. Otherwise, an internal Slurm is used."
    printf "  %-20s\t%s\n" "--without-slurm" "disable Slurm usage completely."
    printf "  %-20s\t%s\n" "--with-zlib=DIR" "Root directory of zlib installation, or 'zlib-1.2.11'."
    printf "  %-20s\t%s\n" ""               "If a directory is given, then an external zlib is used. In this case,"
    printf "  %-20s\t%s\n" ""               "DIR/include, DIR/lib and DIR/lib64 are added to search paths for"
    printf "  %-20s\t%s\n" ""               "headers and libraries. Otherwise, an internal zlib is used."
    printf "  %-20s\t%s\n" "--without-zlib" "disable zlib usage completely."
    printf "\n"
    printf "  %-20s\t%s\n" "-v, --verbose" "be more verbose"
    printf "  %-20s\t%s\n" "-h, --help" "display this help and exit"
    printf "  %-20s\t%s\n" "--version" "display version information and exit"
    printf "\n"
    printf " Any additional options are passed on to make.\n"
    printf "\n"
    printf " Report bugs to: <james@simula.no>.\n"
}

function version()
{
    printf "%s %s\n" "${program_name}" "${program_version}"
    printf "Copyright (C) 2021 James D. Trotter\n"
    printf "License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>\n"
    printf "This is free software: you are free to change and redistribute it.\n"
    printf "There is NO WARRANTY, to the extent permitted by law.\n"
}

function list_packages()
{
    make list-packages
}

function describe_packages()
{
    while [ "$#" -gt 0 ]; do
	make "${1}-describe"
	shift 1
    done
}

function parse_program_options()
{
    # Default options
    EXTRA_OPTIONS=()

    # Parse program options
    while [ "$#" -gt 0 ]; do
	case "${1}" in
	    -h | --help) help; exit 0;;
	    --version) version; exit 0;;
	    --list-packages) list_packages; exit 0;;
	    --describe-package) describe_package=1; shift 1;;
	    --prefix) prefix="${2}"; shift 2;;
	    --prefix=*) prefix="${1#*=}"; shift 1;;
	    --pkgscdir) pkgscdir="${2}"; shift 2;;
	    --pkgscdir=*) pkgscdir="${1#*=}"; shift 1;;
	    --pkgdir) pkgdir="${2}"; shift 2;;
	    --pkgdir=*) pkgdir="${1#*=}"; shift 1;;
	    --modulefilesdir) modulefilesdir="${2}"; shift 2;;
	    --modulefilesdir=*) modulefilesdir="${1#*=}"; shift 1;;
	    --enable-gfortran) enable_gfortran=1; shift 1;;
	    --with-openblas) with_openblas="${2}"; shift 2;;
	    --with-openblas=*) with_openblas="${1#*=}"; shift 1;;
	    --without-openblas) with_openblas=no; shift 1;;
	    --with-cmake) with_cmake="${2}"; shift 2;;
	    --with-cmake=*) with_cmake="${1#*=}"; shift 1;;
	    --without-cmake) with_cmake=no; shift 1;;
	    --with-cuda) with_cuda="${2}"; shift 2;;
	    --with-cuda=*) with_cuda="${1#*=}"; shift 1;;
	    --without-cuda) with_cuda=no; shift 1;;
	    --with-hwloc) with_hwloc="${2}"; shift 2;;
	    --with-hwloc=*) with_hwloc="${1#*=}"; shift 1;;
	    --without-hwloc) with_hwloc=no; shift 1;;
	    --with-ucx) with_ucx="${2}"; shift 2;;
	    --with-ucx=*) with_ucx="${1#*=}"; shift 1;;
	    --without-ucx) with_ucx=no; shift 1;;
	    --with-mpi) with_mpi="${2}"; shift 2;;
	    --with-mpi=*) with_mpi="${1#*=}"; shift 1;;
	    --without-mpi) with_mpi=no; shift 1;;
	    --with-openssl) with_openssl="${2}"; shift 2;;
	    --with-openssl=*) with_openssl="${1#*=}"; shift 1;;
	    --without-openssl) with_openssl=no; shift 1;;
	    --with-python) with_python="${2}"; shift 2;;
	    --with-python=*) with_python="${1#*=}"; shift 1;;
	    --without-python) with_python=no; shift 1;;
	    --with-rocm) with_rocm="${2}"; shift 2;;
	    --with-rocm=*) with_rocm="${1#*=}"; shift 1;;
	    --without-rocm) with_rocm=no; shift 1;;
	    --with-slurm) with_slurm="${2}"; shift 2;;
	    --with-slurm=*) with_slurm="${1#*=}"; shift 1;;
	    --without-slurm) with_slurm=no; shift 1;;
	    --with-zlib) with_zlib="${2}"; shift 2;;
	    --with-zlib=*) with_zlib="${1#*=}"; shift 1;;
	    --without-zlib) with_zlib=no; shift 1;;
	    -v | --verbose) verbose=1; shift 1;;
	    --) shift; break;;
	    *) EXTRA_OPTIONS+=("${1}"); shift 1;;
	esac
    done
    EXTRA_OPTIONS+="$@"

    set -- "${EXTRA_OPTIONS[@]}"
}

function main ()
{
    parse_program_options "$@"

    # Describe packages
    if [ ! -z "${describe_package}" ]; then
	describe_packages ${EXTRA_OPTIONS[@]}
	exit 0
    fi

    echo "Installing modules to ${prefix:-.}" >&2

    make_options=""
    [ ! -z "${prefix}" ] && make_options+=" prefix=${prefix}"
    [ ! -z "${pkgsrcdir}" ] && make_options+=" pkgsrcdir=${pkgsrcdir}"
    [ ! -z "${pkgdir}" ] && make_options+=" pkgdir=${pkgdir}"
    [ ! -z "${modulefilesdir}" ] && make_options+=" modulefilesdir=${modulefilesdir}"
    [ ! -z "${enable_gfortran}" ] && make_options+=" ENABLE_GFORTRAN=1"
    [ ! -z "${with_openblas}" ] && make_options+=" WITH_OPENBLAS=${with_openblas}"
    [ ! -z "${with_cmake}" ] && make_options+=" WITH_CMAKE=${with_cmake}"
    [ ! -z "${with_cuda}" ] && make_options+=" WITH_CUDA=${with_cuda}"
    [ ! -z "${with_hwloc}" ] && make_options+=" WITH_HWLOC=${with_hwloc}"
    [ ! -z "${with_ucx}" ] && make_options+=" WITH_UCX=${with_ucx}"
    [ ! -z "${with_mpi}" ] && make_options+=" WITH_MPI=${with_mpi}"
    [ ! -z "${with_openssl}" ] && make_options+=" WITH_OPENSSL=${with_openssl}"
    [ ! -z "${with_python}" ] && make_options+=" WITH_PYTHON=${with_python}"
    [ ! -z "${with_rocm}" ] && make_options+=" WITH_ROCM=${with_rocm}"
    [ ! -z "${with_slurm}" ] && make_options+=" WITH_SLURM=${with_slurm}"
    [ ! -z "${with_zlib}" ] && make_options+=" WITH_ZLIB=${with_zlib}"
    make ${make_options} ${EXTRA_OPTIONS[@]}
}

main "$@"
